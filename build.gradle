buildScan { termsOfServiceUrl = 'https://gradle.com/terms-of-service'; termsOfServiceAgree = 'yes' }

allprojects {
    group 'com.agorapulse'
    repositories {
        jcenter()
        mavenCentral()
        maven { url  "https://dl.bintray.com/agorapulse/libs" }
        maven { url "https://repo.spring.io/release"  }
    }
}

subprojects { Project subproject ->
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'groovy'
    apply plugin: 'jacoco'
    apply plugin: 'checkstyle'
    apply plugin: 'codenarc'

    apply plugin:"net.ltgt.apt-eclipse"
    apply plugin:"net.ltgt.apt-idea"

    configurations {
        optional.extendsFrom compile

        compileOnly.extendsFrom optional
        testCompile.extendsFrom optional
    }

    dependencyManagement {
        imports {
            mavenBom "io.micronaut:micronaut-bom:$micronautVersion"
        }

        dependencies {
            dependencySet(group: 'com.amazonaws', version: project.awsSdkVersion) {
                entry 'aws-java-sdk-core'
                entry 'aws-java-sdk-dynamodb'
                entry 'aws-java-sdk-kms'
                entry 'aws-java-sdk-kinesis'
                entry 'aws-java-sdk-s3'
                entry 'aws-java-sdk-ses'
                entry 'aws-java-sdk-sns'
                entry 'aws-java-sdk-sqs'
                entry 'aws-java-sdk-sts'
                entry 'jmespath'
            }

            dependencySet(group: 'software.amazon.sdk', version: project.awsSdk2Version) {
                entry 'core'
                entry 'dynamodb'
                entry 'kms'
                entry 'kinesis'
                entry 's3'
                entry 'ses'
                entry 'sns'
                entry 'sqs'
                entry 'sts'
            }

            dependency group: 'com.amazonaws', name: 'amazon-dax-client', version: '1.0.202017.0'
            dependency group: 'com.amazonaws', name: 'amazon-kinesis-client', version: '1.9.3'
            dependency group: 'com.amazonaws', name: 'aws-lambda-java-events', version: '2.2.5'
            dependency group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-cbor', version: project['jackson.datatype.version']
        }
    }

    dependencies {
        annotationProcessor "io.micronaut:micronaut-inject-java"

        // Groovy
        compile "org.codehaus.groovy:groovy:$groovyVersion"

        compile "io.micronaut:micronaut-runtime-groovy"
        compile "io.micronaut:micronaut-inject"
        compile "io.micronaut:micronaut-runtime"

        compileOnly "io.micronaut:micronaut-inject-groovy"
        compileOnly "io.micronaut:micronaut-inject-java"


        runtime "ch.qos.logback:logback-classic:1.2.3"

        testCompile "io.micronaut:micronaut-inject-groovy"
        testCompile "io.micronaut:micronaut-inject-java"

        testCompile("org.spockframework:spock-core:$spockVersion") {
            exclude group: "org.codehaus.groovy", module: "groovy-all"
        }
        testCompile 'cglib:cglib-nodep:3.2.0'
        testCompile 'org.objenesis:objenesis:1.2'

        testCompileOnly 'com.agorapulse:remember:0.1'
    }

    compileJava.options.compilerArgs += '-parameters'
    compileTestJava.options.compilerArgs += '-parameters'

    test {
        testLogging {
            events "PASSED", "STARTED", "FAILED", "SKIPPED", "STANDARD_ERROR", "STANDARD_OUT"
            showCauses = true
            showExceptions = true
            showStackTraces = true
            showStandardStreams = false
            exceptionFormat "full"
        }

        environment 'AWS_CBOR_DISABLE', 'true'

        systemProperty 'TEST_RESOURCES_FOLDER', new File(subproject.projectDir, 'src/test/resources').canonicalPath
        systemProperty 'user.timezone', 'UTC'
        systemProperty 'user.language', 'en'
    }

    task cleanOut(type: Delete) {
        delete file('out')
    }

    clean.dependsOn cleanOut

    checkstyle {
        configFile = rootProject.file('config/checkstyle/checkstyle.xml')
        toolVersion = '8.27'
    }

    codenarc {
        configFile = rootProject.file('config/codenarc.xml')
        toolVersion = '1.2.1'
    }
}


// docs
apply plugin: 'org.ajoberstar.git-publish'
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'com.palantir.jacoco-full-report'
apply plugin: 'com.github.kt3k.coveralls'

dependencies {
    // https://mvnrepository.com/artifact/io.spring.asciidoctor/spring-asciidoctor-extensions
    asciidoctor group: 'io.spring.asciidoctor', name: 'spring-asciidoctor-extensions', version: '0.1.3.RELEASE'

}

// asciidoctor publishing
asciidoctor {

    sourceDir = file('docs')

    resources {
        from(sourceDir) {
            include 'css/**', 'images/**'
        }
    }

    attributes 'docinfo1': ['version': project.version],
        'imagesdir': 'images',
        'source-highlighter': 'highlight.js',
        'stylesdir': 'css',
        icons: 'font',
        'toc': 'left',
        'toclevels': '3',
        version: project.version,
        'projectUrl': 'https://github.com/agorapulse/micronaut-libraries'
}

gitPublish {
    repoUri = 'git@github.com:agorapulse/micronaut-libraries.git'
    branch = 'gh-pages'

    contents {
        from file(asciidoctor.outputDir.path + '/html5')
        subprojects.each { Project subproject ->
            from(subproject.javadoc.outputs.files) {
                into "docs/javadoc/$subproject.name"
            }
        }
    }
}

gitPublishCopy.dependsOn subprojects*.javadoc
gitPublishCopy.dependsOn asciidoctor

tasks.jacocoFullReport.dependsOn subprojects.collect { it.tasks.check }

gradle.taskGraph.whenReady {
    coveralls {
        sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
        jacocoReportPath = "${buildDir}/reports/jacoco/jacocoFullReport/jacocoFullReport.xml"
    }
}

tasks.coveralls {
    group = 'Coverage reports'
    description = 'Uploads the aggregated coverage report to Coveralls'

    dependsOn jacocoFullReport
    onlyIf { System.env.CI }
}
